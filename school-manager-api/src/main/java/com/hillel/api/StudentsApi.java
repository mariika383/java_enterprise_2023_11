/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.hillel.api;

import com.hillel.model.Student;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-01-16T16:52:25.131245300+02:00[Europe/Helsinki]")
@Validated
@Tag(name = "student", description = "Operations related to students")
public interface StudentsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /students : Get list of students
     *
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "studentsGet",
        summary = "Get list of students",
        tags = { "student" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/students",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> studentsGet(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /students : Create a new student
     *
     * @param student  (required)
     * @return Student created successfully (status code 201)
     */
    @Operation(
        operationId = "studentsPost",
        summary = "Create a new student",
        tags = { "student" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Student created successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/students",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> studentsPost(
        @Parameter(name = "Student", description = "", required = true) @Valid @RequestBody Student student
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /students/{studentId} : Delete a student
     *
     * @param studentId  (required)
     * @return Successful response with no content (status code 204)
     */
    @Operation(
        operationId = "studentsStudentIdDelete",
        summary = "Delete a student",
        tags = { "student" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Successful response with no content")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/students/{studentId}"
    )
    
    default ResponseEntity<Void> studentsStudentIdDelete(
        @Parameter(name = "studentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("studentId") Long studentId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /students/{studentId} : Get details of a student
     *
     * @param studentId  (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "studentsStudentIdGet",
        summary = "Get details of a student",
        tags = { "student" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/students/{studentId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> studentsStudentIdGet(
        @Parameter(name = "studentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("studentId") Long studentId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /students/{studentId} : Update information of a student
     *
     * @param studentId  (required)
     * @param student  (required)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "studentsStudentIdPut",
        summary = "Update information of a student",
        tags = { "student" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/students/{studentId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> studentsStudentIdPut(
        @Parameter(name = "studentId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("studentId") Long studentId,
        @Parameter(name = "Student", description = "", required = true) @Valid @RequestBody Student student
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }
    @Operation(
            operationId = "studentsGet",
            summary = "Get list of students",
            tags = {"student"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Successful response")
            }
    )
    @GetMapping("/students")
    ResponseEntity<List<Student>> getAllStudents();


    @Operation(
            operationId = "studentsPost",
            summary = "Create a new student",
            tags = {"student"},
            responses = {
                    @ApiResponse(responseCode = "201", description = "Student created successfully")
            }
    )
    @PostMapping("/students")
    ResponseEntity<Student> createStudent(@Valid @RequestBody Student student);


    @Operation(
            operationId = "studentsStudentIdDelete",
            summary = "Delete a student",
            tags = {"student"},
            responses = {
                    @ApiResponse(responseCode = "204", description = "Successful response with no content")
            }
    )
    @DeleteMapping("/students/{studentId}")
    ResponseEntity<Void> deleteStudent(@PathVariable("studentId") Long studentId);


    @Operation(
            operationId = "studentsStudentIdGet",
            summary = "Get details of a student",
            tags = {"student"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Successful response")
            }
    )
    @GetMapping("/students/{studentId}")
    ResponseEntity<Student> getStudentById(@PathVariable("studentId") Long studentId);


    @Operation(
            operationId = "studentsStudentIdPut",
            summary = "Update information of a student",
            tags = {"student"},
            responses = {
                    @ApiResponse(responseCode = "200", description = "Successful response")
            }
    )
    @PutMapping("/students/{studentId}")
    ResponseEntity<Student> updateStudent(
            @PathVariable("studentId") Long studentId,
            @Valid @RequestBody Student student
    );

}
